ПБ - потокобезопасность

Можно впоследствии присваивать главам "степень отжима", условно:
100 - все понятно, можно не перечитывать, извлечено максимум информации.
80 - извлечено много, но что-то осталось, что можно в общем-то было бы дожать.
20 - извлечено мало, причина - не понятно.
0 - не извлечено ничего. Причина: пустословие, нечего извлекать.


* Publishing and escaping, тема 3.2
Трудно понять по самой книге, да и гуглится не очень. Но само понятие публикации и ускользания
кажется интересным.

* Класс ThreadLocal, тема 3.3, Ограничение одним потоком (thread confinement)

* CopyOnWriteArrayList, ConcurrentMap, Collections.unmodifiableMap


[ ] Загуглить наверняка, что такое состояние гонки на хорошем примере, а то я начал уже сомневаться,
что есть race condition и чем оно отличается от lost updates.
[ ] Посмотреть какие еще обертки есть кроме Collections.unmodifiableMap, Collections.syncronizedList
и посмотреть как они реализованы внутри, как там потокобезопасность устроена


Дополнительные выводы:
* Стоит быть вдвойне осторожным и внимательным, когда многопоточность касается состояния из нескольких
взаимосвязанных переменных, т.е. когда несколько переменных именно вместе как-то логически связаны и
изменение одной как-то связано, например, с изменением или анализом другой.



* После завершения раздела нужно сделать резюме, где свести рядом все примеры и дать комментарии.
А также все советы обдумать и опять же свести к короткому списку.
На каждую концепцию, например, "последовательное ограничение одним потоком" попробовать найти примеры
в стандартной библиотеке и вынести в конспект рядом с упоминанием концепции
* Посмотреть реализацию потокобезопасности в джавовских классах, вроде ПБ коллекций, или Vector


???
* У меня возникал вопрос, в чем проблема конкурентного доступа к не ПБ коллекции, если надо только читать?
Зачем доступ на чтение надо синхронизировать? Вроде где-то я писал об этом, но где, уже не помню, надо все
перечитывать. Но еще одна причина - если все-таки кто-то пишет в эту коллекцию, то fail-fast итератор даст
ConcurrentModificationException и читающие потоки обломаются.